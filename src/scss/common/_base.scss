/* 권장되는 사용 방법 */
.foo {
    // @extend, @include는 상단에 모아쓰고 그 뒤 빈 줄을 추가한다.
    @extend %a;
    @extend %b;
    @include abc(n);

    // 속성 별 개행
    display:block;
    overflow:hidden;
    position: relative;
    z-index: 10;
    width: 100px;
    margin: 0;
    padding: 0;
    border: 1px solid red;
    background: red;
    font-weight: bold;
    letter-spacing: -1px;
    text-decoration: underline;

    // 상황에 따라 하단에 위치할수도 있음.
    @include bcd(n);

    // 하위 선택자가 시작될 때 앞에 빈 줄 추가.
    .bar {
        ...
    }
}

/* 나쁜 사용법 */
// 개행하지 않음
.foo{
    @extend %a;@extend %b;@include abc(n);display:block;overflow:hidden;position:relative;z-index:10;width:100px;margin:0;padding:0;border:1px solid red;background:red;font-weight:bold;letter-spacing:-1px;text-decoration:underline; 
    .bar {...}
}
//@extend를 상단에 모아 쓰지 않음, @extend와 @include 다음 빈줄을 추가 하지 않음
.foo {
    @include abc(n);
    display:block;
    ...


    @extend %b;
    width:100px;
    @extend %a;

    .bar {
        ...
    }
}
// 하위 선택자 전에 빈줄을 추가하지 않음, 들여쓰기 하지 않음
.foo {
    @extend %a;
    @extend %b;
    @include abc(n);

    display:block;
    .bar{
    margin:0;
    padding:0;
    }
}

// 띄워쓰기
$height - ($width * 2)

.title > .tx::after
.title + div

/* 주석은 개발자도구로 디버깅 시(sass 미사용자, 서비스 초기 투입 시) 선언 위치 파악에 도움 */
/* 파일명 */
// 그외

/* 네이밍 규칙 */
// 8.1. placeholder selector
// 문자 : 소문자
// 연결자 : _ (underbar)
// 예시 
%text_color

/* mixin -- camel 추천 */
@mixin testBox() {
    ...
}

@mixin testBox($test) {
    ...
}

/* 8.3. 변수 */
/* 지역변수(로컬 변수) 소문자
 * 전역변수(글로벌 변수) G-소문자
 * 상수 : 대문자
 * 연결자 : Hyphen(-)
 * 네이밍 조합 : ${요소(Element, class) 이름} - {속성 이름} - {용도 및 역할}
 * 네이밍 조합 케이스
 * 1. ${요소} - {속성이름} ----> $body-color, $body-background-color, $G-body-background-color 등
 * 2. ${요소} - {용도 및 역할} ----> $body-horizontal 등
 * 3. ${요소} - {속성이름} - {용도 및 역할} ----> $body-color-point
 * 4. ${요소} - {속성이름} ----> $btn-border-color, $btn_more-border-color 등
 * 5. ${요소} - {속성이름} - {용도 및 역할} ----> $btn-border-color-hover
 * 6. ${속성이름} - {용도 및 역할} ----> $G-color-point
 * 7. ${용도 및 역할} ----> $index, $count, $length, $max-count 등
 */

 /* 좋은 예 */
$G-body-color: #fff;
$G-font-family-base : Dotum, '돋움', Helvetica, AppleSDGothicNeo, sans-serif;

.test {
    $color-point: #ff0078;
    $margin-endpage:15px;
}


/* 나쁜 예 */
// BAD : 전역변수(글로벌 변수)에는 구분을 위해 'G-'를 prefix로 사용
// (as-is: body-color / to-be: G-body-color)
$body-color: #fff;

.test {
    //BAD: '용도 및 역할'의 변수명은 축약형을 지양하며,
    //fullname 사용(as-is: color-pnt / to-be: color-point)
    $color-pnt: #ff0078;

    //BAD
    //1. '용도 및 역할'의 변수명은 축약형을 지양하며,
    //fullname 사용(as-is: endCtSide / to-be: end-content-side)
    //2. 변수 네이밍은 카멜형식이 아닌 소문자, 연결자는 - (Hyphen)사용(참조: 표 - 네이밍 조합 케이스)
    $endCtSide: 15px;
}

/* 디렉토리 경로에 대한 변수 */
$G-path: '../';
$G-path-img: $G-path + 'img/';

.class {
    background-image: url($G-path-img + 'sp_service.png');
}

/* 8.3.1 지역변수(로컬변수)와 전역변수(글로벌 변수) */
/*
 * 1. 정의
 *    * 지역변수 : 블록 내에서 선언 된 변수 (범위 : 블록내에서만)
 *    * 전역변수 : 블록 밖에서 선언 된 변수 (범위 : 전체)
 * 2. 사용
 *    * 특정 요소 / 모듈의 속성 값을 사이트 전체에서 사용하는 경우 속성 값을 전역변수로 사용한다.
 */

$G-var : 10px; // 전역변수

.foo {
    $var: 5px; // 지역 변수
    $body-width: 100px // 지역 변수
    ...
}

@mixin sample($foo) {
    ...
    // 지역변수
}

/* 8.3.2 선언 */
/*
 * 1. 변수는 한 줄에 하나만 선언한다.
 */

$var1: value;
$var2: value;

/*
 * 2. _variables.scss 파일 내부에 선언한 변수들은 #표 - 네이밍 조합 케이스에 따라 선언
 */

// 요소(Element, class) 이름 - 속성 이름
$G-header-background-color-point;
...

// 속성 - 용도 및 역할 기준
$G-color-point: #ff0078;
...

// 용도 및 역할 기준
$G-path-img: "../img/";
...

// 로컬 변수
$btn_area-width: 10px
...

/*
 * 전역변수
 * _variables.scss에 선언하거나, 별도의 import 파일을 사용하지 않는 경우 관련 scss파일의 상단에 정의한다.
 */


/* 믹스인(Mixin) */
/* 인자값 사용유무에 따라 mixin과 extend를 분리해서 사용 */
/* mixin과 extend을 어떻게 구분하여 사용해야 하는가?  */
/* 기준차이: 작업자 스타일에 따라 다름 */
/* 성능차이: 거의 없음 */
/* 용량차이: 상황에 따라 다름 */
/* 개인취향에 따라 mixin과 extend의 사용이 혼돈된다. */
/* 하지만, mixin은 인자값을 활용할 수 있다는 큰 특징이 있으므로 이를 기준으로 분리하여 사용하는 것을 권장 */

/* 기본 mixin 문법 */
@mixin border-radius($radius) {
    -webkit-border-radius:$radius;
    ...
    border-radius:$radius;
}

.box {
    @include border-radius(10px);
}

/* 위의 소스가 컴파일되면 */
.box{
    -webkit-border-radius:10px;
    border-radius:10px;
}

/* 내부 float을 해제하는 헬퍼
 * @author Nicolas Gallagher
 * @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
 */
 @mixin clearfix {
     $::after {
        content:'';
        display: table;
        clear:both;
     }
 }

 /* 요소의 크기를 설정하는 헬퍼
  * @author Hugo Giraudel
  * @param {Length} $width
  * @param {Length} $height
  */
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

/* 믹스인에 들어가는 매개변수 개수 알 수 없을때는 arglist를 사용 */
@mixin shadows($shadows...) {
    // type-of($shadows) == 'arglist'
    // ...x
}

@mixin dummy($a, $b, $c) {
    // ...
}

// Yep
@include dummy(true, 42, 'kittens');

// Yep but nope
$params: (true, 42, 'kittens');
$value: dummy(nth($params, 1), nth($params, 2), nth($params,3));

// Yep
$params: (true, 42, 'kittens');
@include dummy($params...);

// Yep
$params: (
    'c': 'kittens',
    'a': true,
    'b': 42,
);
@include dummy($params...);

/* autoprefix 사용시 수동으로 하나씩 하지마 */
// Nope
@mixin transform($value) {
    -webkit-transform: $value;
    -moz-transform: $value;
    transform: $value;
}

// 영리하게
/* 벤더프리픽스 헬퍼 */
/*
 * @access public
 * @author HugoGiraudel
 * @param {String} $property - 프리픽스 없는 css
 * @param {*} $value - 가공되지 않은 css
 * @param {List} $prefixes - 산출할 프리픽스 리스트
 */
 @mixin prefix($property, $value, $prefixes: ()) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: $value;
    }

    #{$property}: $value;
}

// 이 믹스인을 사용하는 것은 아주 간단~
.foo {
    @include prefix(transform, rotate(90deg), ('webkit', 'ms'));
}
// 이것은 조악한(거칠고 나쁘다.) 해결책이라는 점을 명심하세요.
// 예를 들면, Flexbox에 필요한 것과 같은 복잡한 폴리필은 처리하지 못합니다. 
// 그런 면에서, Autoprefixer를 사용하는 것이 훨씬 나은 선택입니다.




/* @extend */
/*
 * 선언방법
 * %(place holder)선택자를 사용
 */
%bar {
    border:1px solid red;
}

/* 사용하는 이유 */
/*
 * @extend로 쓰는 것인지 아닌지에 대한 사용 여부를 구분하기 위함
 * 다른 선택자(class, id 등)와 구분하여 사용하기 때문에 의도하지 않거나 예상하기 힘든 코드를 만들어내는 일을 최소화
 */

 /* 좋은 예(% 선택자를 사용) */
%foo {
}

.bar {
    @extend %foo;
}

/* 나쁜 예(Class 선택자를 사용) */
.foo{}

.bar{
    @extend .foo;
}

// 기본 extend 문법
%layout {
    border: 1px solid #ccc;
    padding: 10px;
    color:#333;
}

.success {
    @extend %layout;
    border-color: green;
}

.error {
    @extend %layout;
    border-color: red;
}

.warning {
    @extend %layout;
    border-color: yellow;
}

/* 위의 소스가 컴파일 되면 */
.success, .error, .warning { border: 1px solid #cccccc; padding: 10px; color: #333; }
.success { border-color: green; }
.error { border-color: red; }
.warning { border-color: yellow; }

/*
 * extend는 @media 와는 제대로 작동하지 않는다.
 * Sass 는 미디어 쿼리 안에서 외부의 선택자를 확장할 수 없다.
 */

 .foo {
    content: 'foo';
 }

 @media print {
     .bar {
         @extend .foo;
         // !충돌 컴파일러는 할 수 없는 일이라고 에러메시지를 출력

         /* 에러메시지 */
         /*
          * You may not @extend an outer selector from within @media.
          * => @media 안에서 외부의 선택자를 @extend 할 수 없다.
          * You may only @extend selectors within the same directive.
          * => 같은 지시자 안에 있는 선택자만 @extend 할 수 있다. => @media 내부는 @media 외부와 같은 지시자가 아님.
          */
     }
 }

 /* 10.1. %(place holder)의 확장 */
 /*
  * 규칙 세트 확장 가능
  * 확장 시 고려사항
  * * 다른 모듈들에 걸치지 않게, 한 모듈 안에서 확장 사용
  * * 오로지 %에만 확장을 사용하고, 실제 선택자(class, id??)에는 사용x
  * * 확장하는 %가 가능한 한 적게 존재하도록 사용
  */

  %foo{
    //@extend안에 @include 가능 => 같은 지시자인가봄?1
    @include bar;

    .baz {
        width: 100px;
    }
  }

  /* 10.2. % 선언시, 축약형 지양 */
  %sp_enter {
      background-image: url($path-img + "sp_enter_10.png");
      background-repeat: no-repeat;
      background-position: -999px -999px;
  }

  /* 나쁜 예 */
  %sp_enter {
      background: url($path-img + "sp_enter_10.png") no-repeat -999px -999px;
  }

  /* 제어구문 (@if, @each, @for 등) */
  /* 
   * 시작 중괄호 : 문장과 같은 줄에 선언
   * 닫는 중괄호 : 끝 빈줄에 선언
   * 제어구문 다양한 예제보기
   */
   /* @if */
   @if $foo{
       ...
   }

   // @ else 와 @ else if : 이전 문장의 닫는 괄호와 같은 줄이 기술
   $type: monster;

   p {
       @if $type == ocean {
           color: blue;
       } @else if $type == matador {
           color: red;
       } @else if $type == monster {
           color: green;
       } @else {
           color: black;
       }
   }

   // 컴파일되면
   p{
       color: green;
   }

   // @if 기타 활용예시
   @mixin foo($_imgsize, $_position: relative) {
       @if $_position != absolute{
           display: block;
       }

       position: $_position;
       width: $_imgsize;

       ...
   }

   // @each 활용 예 1
   @each $animal in puma, sea-slug, egret, salamander {
       .#{$animal}-icon {
           background-image: url('/images/#{$animal}.png');
       }
   }

   .puma-icon {
       background-image: url('/images/puma.png');
   }
   ...
   .salamander-icon {
       background-image: url('/images/salamander.png');
   }

   // @each 활용 예 2
   $map: (
       key: #aaa,
       value: #bbb
   )

   @each $key, $value in $map {
       .section-#{$key} {
           background-color: $value;
       }
   }

   /* 컴파일된 css */
   section-key {
       
   }